@model Scribe.Models.DashboardViewModel

@{
    ViewData["Title"] = "Dashboard";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<h2>Device Dashboard</h2>

<!-- Export PDF -->
<button id="exportPdfBtn" class="btn btn-primary mb-4">Export as PDF</button>

<div id="dashboardContent" class="container-fluid">

    <!-- Status Pie: always full width -->
    <div class="row mb-4">
        <div class="col-12">
            <h5>Status Distribution</h5>
            <canvas id="statusPieChart"></canvas>
        </div>
    </div>

    <!-- New Devices + Allocations -->
    <div class="row mb-4">
        <div class="col-lg-6 mb-4 mb-lg-0">
            <h5>Monthly New Devices</h5>
            <canvas id="newDevicesChart"></canvas>
        </div>
        <div class="col-lg-6">
            <h5>Monthly Allocations</h5>
            <canvas id="allocationsChart"></canvas>
        </div>
    </div>

    <!-- Expiry + Most Serviced -->
    <div class="row mb-4">
        <div class="col-lg-6 mb-4 mb-lg-0">
            <h5>Device Expiry Rate</h5>
            <canvas id="expiryChart"></canvas>
        </div>
        @if (Model.MostServicedModels != null && Model.MostServicedModels.Any(x => x.Value > 1))
        {
            <div class="col-lg-6">
                <h5>Most Serviced Models</h5>
                <canvas id="mostServicedChart"></canvas>
            </div>
        }
    </div>

    <!-- Average Lifetime + Forecasted Lifetime Tables -->
    <div class="row mb-4">
        <div class="col-lg-6 mb-4 mb-lg-0">
            <h5>Average Model Lifetime (days)</h5>
            <table class="table table-bordered table-sm">
                <thead>
                    <tr>
                        <th>Model</th>
                        <th>Average Lifetime</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.ModelLifetimes)
                    {
                        <tr>
                            <td>@item.Key</td>
                            <td>@item.Value</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-lg-6">
            <h5>Forecasted Model Lifetime (days)</h5>
            <table class="table table-bordered table-sm">
                <thead>
                    <tr>
                        <th>Model</th>
                        <th>Forecasted Lifetime</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.ModelLifetimeForecasts)
                    {
                        <tr>
                            <td>@item.Key</td>
                            <td>@item.Value</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>

<script>
    // Export to PDF
    document.getElementById("exportPdfBtn").addEventListener("click", function () {
        html2pdf().from(document.getElementById("dashboardContent")).save("dashboard.pdf");
    });

    // Status Pie
    const statusPieCtx = document.getElementById('statusPieChart').getContext('2d');
    new Chart(statusPieCtx, {
        type: 'pie',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.StatusDistribution.Keys)),
            datasets: [{
                data: @Html.Raw(Json.Serialize(Model.StatusDistribution.Values)),
                backgroundColor: ['#4CAF50', '#F44336', '#FFC107', '#2196F3']
            }]
        }
    });

    // Monthly New Devices
    const newDevicesCtx = document.getElementById('newDevicesChart').getContext('2d');
    new Chart(newDevicesCtx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.NewDevicesMonthly.Keys)),
            datasets: [{
                label: 'New Devices',
                data: @Html.Raw(Json.Serialize(Model.NewDevicesMonthly.Values)),
                backgroundColor: '#4CAF50'
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: { beginAtZero: true },
                y: { beginAtZero: true }
            },
            plugins: {
                zoom: {
                    pan: { enabled: true, mode: 'x' },
                    zoom: { wheel: { enabled: true }, mode: 'x' }
                }
            }
        }
    });

    // Monthly Allocations
    const allocationsCtx = document.getElementById('allocationsChart').getContext('2d');
    new Chart(allocationsCtx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.AllocationsMonthly.Keys)),
            datasets: [{
                label: 'Allocations',
                data: @Html.Raw(Json.Serialize(Model.AllocationsMonthly.Values)),
                backgroundColor: '#2196F3'
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: { beginAtZero: true },
                y: { beginAtZero: true }
            },
            plugins: {
                zoom: {
                    pan: { enabled: true, mode: 'x' },
                    zoom: { wheel: { enabled: true }, mode: 'x' }
                }
            }
        }
    });

    // Expiry Line
    const expiryCtx = document.getElementById('expiryChart').getContext('2d');
    new Chart(expiryCtx, {
        type: 'line',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.DeviceExpiryMonthly.Keys)),
            datasets: [{
                label: 'Expired Devices',
                data: @Html.Raw(Json.Serialize(Model.DeviceExpiryMonthly.Values)),
                borderColor: '#F44336',
                fill: false
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: { beginAtZero: true },
                y: { beginAtZero: true }
            },
            plugins: {
                zoom: {
                    pan: { enabled: true, mode: 'x' },
                    zoom: { wheel: { enabled: true }, mode: 'x' }
                }
            }
        }
    });

    // Most Serviced Models
    @if (Model.MostServicedModels != null && Model.MostServicedModels.Any(x => x.Value > 1))
    {
        <text>
            const mostServicedCtx = document.getElementById('mostServicedChart').getContext('2d');
            new Chart(mostServicedCtx, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.MostServicedModels.Where(x => x.Value > 1).Select(x => x.Key))),
                    datasets: [{
                        label: 'Services',
                        data: @Html.Raw(Json.Serialize(Model.MostServicedModels.Where(x => x.Value > 1).Select(x => x.Value))),
                        backgroundColor: '#FFC107'
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: { beginAtZero: true },
                        y: { beginAtZero: true }
                    }
                }
            });
        </text>
    }
</script>
